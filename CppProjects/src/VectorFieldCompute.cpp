
#include "VectorFieldCompute.h"
#include "VastistasVelocityGenerator.h"
#include <Eigen/Dense>
#include <array>
#include <execution>
#include <fstream>
#include <random>

//  #define DISABLE_CPP_PARALLELISM
//   define execute policy
#if defined(DISABLE_CPP_PARALLELISM) || defined(_DEBUG)
auto policy = std::execution::seq;
#else
auto policy = std::execution::par_unseq;
#endif
namespace {

std::mt19937 rng(static_cast<unsigned int>(std::time(0)));

}

using namespace std;

constexpr std::array<std::array<double, 64>, 64> noiseTexture = {
    std::array<double, 64> { 0.641471, 0.410781, 0.509297, 0.441120, 0.756802, 0.558924, 0.679415, 0.364784, 0.621610, 0.450447, 0.675637, 0.439173, 0.083099, 0.566237, 0.492459, 0.568064, 0.353738, 0.601859, 0.563558, 0.383641, 0.436737, 0.452217, 0.720313, 0.603411, 0.685168, 0.639921, 0.372336, 0.494764, 0.318765, 0.714130, 0.641209, 0.410781, 0.509297, 0.441120, 0.756802, 0.558924, 0.679415, 0.364784, 0.621610, 0.450447, 0.675637, 0.439173, 0.083099, 0.566237, 0.492459, 0.568064, 0.353738, 0.601859, 0.563558, 0.383641, 0.436737, 0.451945, 0.412345, 0.678901, 0.54456, 0.54456, 0.401234, 0.467890, 0.434567, 0.499962, 0.54456, 0.654861, 0.153306, 0.159406 },
    std::array<double, 64> { 0.559974, 0.54456, 0.340302, 0.755750, 0.731689, 0.506737, 0.334172, 0.389358, 0.547454, 0.639594, 0.681638, 0.798440, 0.519575, 0.814209, 0.384501, 0.670665, 0.681296, 0.334693, 0.838371, 0.328618, 0.894764, 0.402459, 0.428121, 0.720687, 0.611789, 0.613392, 0.768594, 0.475050, 0.755605, 0.676025, 0.400134, 0.429713, 0.200000, 0.388987, 0.654321, 0.560765, 0.432109, 0.176543, 0.10000, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.410781, 0.509297, 0.441120, 0.756802, 0.679415, 0.321098, 0.387654, 0.321098, 0.265445, 0.111155 },
    std::array<double, 64> { 0.599962, 0.599962, 0.599962, 0.54456, 0.598534, 0.317193, 0.501234, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.54456, 0.501234, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.54456, 0.501234, 0.567890, 0.534567, 0.990123, 0.056789, 0.512345, 0.678901, 0.54456, 0.501234, 0.567890, 0.490123, 0.798534, 0.417193, 0.874403, 0.888888, 0.14852, 0.528346, 0.439350, 0.689035, 0.486872, 0.489764, 0.024729, 0.439188, 0.504208, 0.530342, 0.065986, 0.720534, 0.40404, 0.3324403, 0.101088, 0.44452, 0.0024416, 0.035750, 0.689035, 0.486872, 0.489764, 0.624729, 0.439188, 0.504208, 0.16548, 0.11986 },
    std::array<double, 64> { 0.599574, 0.540302, 0.755750, 0.731689, 0.406737, 0.534172, 0.589358, 0.447454, 0.639594, 0.681638, 0.798440, 0.419575, 0.414209, 0.384501, 0.670665, 0.681296, 0.534693, 0.438371, 0.528618, 0.794764, 0.402459, 0.428121, 0.720687, 0.511789, 0.613392, 0.068594, 0.075050, 0.755605, 0.576025, 0.400134, 0.429713, 0.480884, 0.490123, 0.400534, 0.514493, 0.085003, 0.432109, 0.176543, 0.10000, 0.43977, 0.87019, 0.486872, 0.489764, 0.724729, 0.039188, 0.304208, 0.73742, 0.065986, 0.560534, 0.40404, 0.224403, 0.101088, 0.576852, 0.44346, 0.43999, 0.87019, 0.486872, 0.014, 0.66669, 0.439188, 0.504208, 0.530342, 0.290123 },
    std::array<double, 64> { 0.410781, 0.509631, 0.571442, 0.573756, 0.560534, 0.40404, 0.66403, 0.101088, 0.576852, 0.28746, 0.439350, 0.87019, 0.486872, 0.014, 0.445729, 0.439188, 0.304208, 0.917193, 0.101088, 0.576852, 0.530342, 0.065986, 0.441886, 0.491037, 0.503710, 0.071420, 0.560376, 0.306899, 0.468192, 0.525921, 0.350478, 0.571206, 0.549662, 0.597849, 0.423444, 0.333123, 0.12034, 0.528346, 0.43988, 0.87019, 0.486872, 0.014, 0.724729, 0.439188, 0.504208, 0.110342, 0.065986, 0.560534, 0.40404, 0.567403, 0.101088, 0.999852, 0.528346, 0.439399, 0.87019, 0.486872, 0.014, 0.222729, 0.439188, 0.504208, 0.65442, 0.290123 },
    std::array<double, 64> { 0.689012, 0.19764, 0.624729, 0.439188, 0.599962, 0.54456, 0.19764, 0.001234, 0.567890, 0.399962, 0.534567, 0.590123, 0.056789, 0.512345, 0.078901, 0.145678, 0.201234, 0.689035, 0.486872, 0.6421, 0.167890, 0.500567, 0.590123, 0.556789, 0.512345, 0.678901, 0.04456, 0.501234, 0.567890, 0.134567, 0.590123, 0.556789, 0.512345, 0.678901, 0.54456, 0.501234, 0.567890, 0.534567, 0.567890, 0.277123, 0.998534, 0.55193, 0.424403, 0.01163, 0.666852, 0.528346, 0.439350, 0.624729, 0.439188, 0.504208, 0.330342, 0.065986, 0.610534, 0.40404, 0.114403, 0.101088, 0.576852, 0.00046, 0.290123, 0.689035, 0.486872, 0.504208, 0.530342, 0.70123 },
    std::array<double, 64> { 0.529962, 0.519962, 0.592962, 0.543219, 0.598761, 0.599962, 0.672345, 0.001234, 0.556789, 0.523456, 0.689012, 0.54456, 0.001234, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.54456, 0.501234, 0.567890, 0.534567, 0.590123, 0.118789, 0.512345, 0.678901, 0.54456, 0.301234, 0.367890, 0.334567, 0.670600, 0.233123, 0.578534, 0.017193, 0.777403, 0.121163, 0.776852, 0.528346, 0.48850, 0.689035, 0.671872, 0.489764, 0.624729, 0.439188, 0.504208, 0.220342, 0.065986, 0.610534, .817193, 0.88888, 0.444103, 0.44163, 0.576852, 0.000346, 0.439390, 0.689035, 0.671872, 0.202, 0.624729, 0.439188, 0.504208, 0.65442, 0.065986 },
    std::array<double, 64> { 0.399962, 0.376543, 0.288987, 0.343210, 0.309962, 0.699962, 0.387654, 0.88871, 0.321098, 0.10152, 0.665432, 0.509876, 0.654321, 0.598765, 0.122229, 0.376543, 0.388987, 0.654321, 0.598765, 0.451229, 0.376543, 0.488987, 0.654321, 0.598765, 0.451229, 0.076543, 0.288987, 0.654321, 0.598765, 0.451229, 0.376543, 0.310987, 0.654321, 0.523365, 0.190123, 0.38034, 0.007193, 0.724403, 0.821163, 0.77772, 0.528346, 0.43750, 0.689035, 0.777872, 0.202, 0.624729, 0.439188, 0.504208, 0.001288, 0.101088, 0.376852, 0.328346, 0.339350, 0.689035, 0.608901, 0.7012, 0.065986, 0.110134, 0.217193, 0.202, 0.624729, 0.439188, 0.504208, 0.07012 },

    std::array<double, 64> { 0.599962, 0.399962, 0.683421, 0.651098, 0.324567, 0.537892, 0.509634, 0.375632, 0.343219, 0.398761, 0.672345, 0.301234, 0.556789, 0.523456, 0.689012, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.556789, 0.678901, 0.54456, 0.301234, 0.367890, 0.234567, 0.777, 0.556789, 0.512345, 0.678901, 0.54456, 0.622652, 0.090123, 0.658534, 0.71953, 0.001288, 0.521763, 0.576852, 0.12346, 0.66350, 0.689035, 0.777872, 0.202, 0.624729, 0.439188, 0.504208, 0.07012, 0.065986, 0.210534, 0.527193, 0.001288, 0.101088, 0.576852, 0.728346, 0.338750, 0.689035, 0.777872, 0.310, 0.624729, 0.439188, 0.504208, 0.50342, 0.33666, 0.77723 },

    std::array<double, 64> { 0.334567, 0.390123, 0.61888, 0.412345, 0.678901, 0.945678, 0.301234, 0.367890, 0.734567, 0.790123, 0.96789, 0.412345, 0.998901, 0.54456, 0.701234, 0.767890, 0.631774, 0.624248, 0.375857, 0.719500, 0.169168, 0.10598, 0.412345, 0.60401, 0.54456, 0.501234, 0.567890, 0.534567, 0.390123, 0.61888, 0.412345, 0.470665, 0.490123, 0.258534, 0.0777193, 0.001288, 0.701088, 0.576852, 0.50006, 0.439350, 0.87019, 0.810872, 0.310, 0.24729, 0.439188, 0.004208, 0.530342, 0.065986, 0.498534, 0.40404, 0.001288, 0.701088, 0.576852, 0.441346, 0.439950, 0.87019, 0.180872, 0.310, 0.111729, 0.439188, 0.504208, 0.130342, 0.065986 },
    std::array<double, 64> { 0.367890, 0.134567, 0.190123, 0.61888, 0.92345, 0.698901, 0.945678, 0.101234, 0.167890, 0.134567, 0.190123, 0.61888, 0.412345, 0.61001, 0.54456, 0.301234, 0.367890, 0.634567, 0.390123, 0.61888, 0.000201, 0.018901, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.670665, 0.450123, 0.208534, 0.017193, 0.0488, 0.701088, 0.576852, 0.28346, 0.439350, 0.87019, 0.180872, 0.310, 0.84729, 0.439188, 0.104208, 0.770342, 0.065986, 0.256534, 0.117193, 0.310, 0.701088, 0.996852, 0.528346, 0.439350, 0.87019, 0.180872, 0.699962, 0.789012, 0.54456, 0.301234, 0.310, 0.724729, 0.439188, 0.504208, 0.580342, 0.91002 },
    std::array<double, 64> { 0.236623, 0.613926, 0.065986, 0.256534, 0.40404, 0.418028, 0.104975, 0.191739, 0.892855, 0.465252, 0.384898, 0.619587, 0.690716, 0.414940, 0.050378, 0.402000, 0.422000, 0.399962, 0.783099, 0.376543, 0.499962, 0.499962, 0.499962, 0.412345, 0.631774, 0.624248, 0.975857, 0.819500, 0.369168, 0.881598, 0.393962, 0.54456, 0.301234, 0.666534, 0.364444, 0.488883, 0.256534, 0.017193, 0.310, 0.701088, 0.476852, 0.428346, 0.739350, 0.87019, 0.180872, 0.37214, 0.788729, 0.439188, 0.504208, 0.544442, 0.999403, 0.701088, 0.076852, 0.028346, 0.439950, 0.87019, 0.180872, 0.37214, 0.5529, 0.439188, 0.504208, 0.630342, 0.065986 },
    std::array<double, 64> { 0.399962, 0.789012, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.818088, 0.412345, 0.078901, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.818088, 0.412345, 0.666901, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.45709, 0.32345, 0.378901, 0.54456, 0.501234, 0.567890, 0.534567, 0.590123, 0.570665, 0.480123, 0.256534, 0.756534, 0.217193, 0.439188, 0.504208, 0.580342, 0.065986, 0.728346, 0.15550, 0.87019, 0.90872, 0.37214, 0.788729, 0.439188, 0.504208, 0.44472, 0.065986, 0.40404, 0.764403, 0.018088, 0.176852, 0.028346, 0.239350, 0.87019, 0.490872, 0.37214, 0.004729, 0.71002, 0.439188, 0.504208, 0.7130342 },
    std::array<double, 64> { 0.557506, 0.599962, 0.511898, 0.624810, 0.380884, 0.583955, 0.591445, 0.597204, 0.570296, 0.418630, 0.419962, 0.429962, 0.401898, 0.380884, 0.402000, 0.422000, 0.400962, 0.783099, 0.076543, 0.599962, 0.499962, 0.699962, 0.412345, 0.567890, 0.818088, 0.499962, 0.401898, 0.380884, 0.511898, 0.624810, 0.400884, 0.170665, 0.890123, 0.123234, 0.57193, 0.65403, 0.018088, 0.276852, 0.448346, 0.9100, 0.87019, 0.94472, 0.489764, 0.79729, 0.439188, 0.504208, 0.58882, 0.065986, 0.07012, .517193, 0.9824403, 0.788856, 0.576852, 0.528346, 0.539350, 0.87019, 0.90872, 0.489764, 0.0014729, 0.439188, 0.504208, 0.740342, 0.065986 },
    std::array<double, 64> { 0.732156, 0.365891, 0.12129, 0.618273, 0.9821, 0.249811, 0.927463, 0.511792, 0.837491, 0.184726, 0.673928, 0.459173, 0.815263, 0.347819, 0.283746, 0.692348, 0.514927, 0.619384, 0.274618, 0.753918, 0.569237, 0.392748, 0.482967, 0.472819, 0.723947, 0.618273, 0.429187, 0.839264, 0.173946, 0.527384, 0.492738, 0.928374, 0.619384, 0.274618, 0.753918, 0.569237, 0.392748, 0.482967, 0.472819, 0.723947, 0.618273, 0.429187, 0.839264, 0.173946, 0.527384, 0.492738, 0.928374, 0.019384, 0.274618, 0.753918, 0.569237, 0.392748, 0.482967, 0.472819, 0.723947, 0.618273, 0.429187, 0.839264, 0.173946, 0.527384, 0.492738, 0.928374 },
    std::array<double, 64> { 0.599574, 0.540302, 0.755750, 0.731689, 0.406737, 0.534172, 0.589358, 0.447454, 0.639594, 0.2271852, 0.128346, 0.422380, 0.87019, 00.681638, 0.798440, 0.419575, 0.414209, 0.384501, 0.670665, 0.681296, 0.534693, 0.438371, 0.528618, 0.794764, 0.402459, 0.428121, 0.720687, 0.511789, 0.613392, 0.768594, 0.475050, 0.755605, 0.576025, 0.400134, 0.429713, 0.480884, 0.48823, 0.400534, 0.40404, 0.124403, 0.788856, 0.176852, 0.928346, 0.539350, 0.87019, 0.367872, 0.560534, 0.40404, 0.1310, 0.489764, 0.99729, 0.439188, 0.504208, 0.7742, 0.065986, 0.788856, .367872, 0.6421, 0.00729, 0.439188, 0.504208, 0.77530342, 0.065986 },
    std::array<double, 64> { 0.410781, 0.509631, 0.571442, 0.573756, 0.560534, 0.40404, 0.310, 0.018088, 0.576852, 0.5117, 0.43380, 0.817019, 0.367872, 0.6421, 0.799729, 0.439188, 0.504208, 0.530342, 0.065986, 0.441886, 0.491037, 0.503710, 0.26910, 0.220376, 0.306899, 0.068192, 0.425921, 0.380478, 0.571206, 0.549662, 0.597849, 0.423444, 0.848123, 0.12034, 0.40404, 0.310, 0.018088, 0.16852, 0.528346, 0.3393250, 0.87019, 0.399872, 0.6421, 0.524729, 0.439188, 0.504208, 0.54442, 0.065986, 0.07012, 0.40404, 0.4747, 0.018088, 0.77852, 0.28346, 0.839388, 0.87019, 0.399872, 0.6421, 0.67729, 0.439188, 0.504208, 0.8530342, 0.06598, 0.127856 },
    std::array<double, 64> { 0.293847, 0.762135, 0.184726, 0.539418, 0.927364, 0.315692, 0.684729, 0.051938, 0.473826, 0.11117, 0.926374, 0.11117, 0.248615, 0.738294, 0.629471, 0.193847, 0.537291, 0.846152, 0.375914, 0.915263, 0.624837, 0.492658, 0.173946, 0.839275, 0.726394, 0.284756, 0.391547, 0.638291, 0.517384, 0.927463, 0.184726, 0.739164, 0.528374, 0.184726, 0.739164, 0.528374, 0.916273, 0.463827, 0.274658, 0.928374, 0.173946, 0.638291, 0.517384, 0.927463, 0.184726, 0.739164, 0.528374, 0.916273, 0.916273, 0.463827, 0.638291, 0.517384, 0.927463, 0.463827, 0.274658, 0.928374, 0.173946, 0.638291, 0.11117, 0.517384, 0.927463, 0.184726, 0.11111, 0.12111 },
    std::array<double, 64> { 0.652202, 0.649129, 0.637687, 0.617193, 0.666025, 0.683662, 0.661262, 0.401593, 0.752260, 0.642788, 0.448854, 0.650904, 0.422260, 0.608466, 0.636656, 0.297495, 0.461051, 0.666025, 0.422618, 0.410222, 0.267486, 0.836575, 0.345784, 0.196953, 0.481754, 0.471010, 0.193068, 0.54456, 0.339168, 0.315162, 0.215762, 0.490123, 0.818088, 0.22345, 0.63101, 0.54456, 0.401234, 0.467890, 0.434567, 0.490123, 0.789012, 0.432109, 0.890123, 0.543210, 0.901234, 0.654321, 0.012345, 0.765432, 0.123456, 0.876543, 0.234567, 0.987654, 0.54456, 0.098765, 0.45558, 0.11256, 0.432109, 0.789012, 0.654321, 0.901234, 0.765432, 0.012345, 0.987654, 0.234567 },
    std::array<double, 64> { 0.503710, 0.971420, 0.560376, 0.306899, 0.468192, 0.525921, 0.310478, 0.071206, 0.549662, 0.597849, 0.423444, 0.490123, 0.12034, 0.40404, 0.4747, 0.88856, 0.576852, 0.528346, 0.410781, 0.509631, 0.571442, 0.560534, 0.517193, 0.0001, 0.4747, 0.2003, 0.57112, 0.528346, 0.47710, 0.66660, 0.399872, 0.6421, 0.724729, 0.439188, 0.504208, 0.74412, 0.065986, 0.441886, 0.491037, 0.839340, 0.66660, 0.399872, 0.6421, 0.5551129, 0.439188, 0.504208, 0.02, 0.065986, 0.07012, 0.517193, 0.4747, 0.29999, 0.27752, 0.8346, 0.839350, 0.066660, 0.500872, 0.6421, 0.924729, 0.439188, 0.504208, 0.08012, 0.91002, 0.91002 },
    std::array<double, 64> { 0.315773, 0.639072, 0.199135, 0.182216, 0.460737, 0.103719, 0.421869, 0.693633, 0.624345, 0.118703, 0.422618, 0.458145, 0.430154, 0.259188, 0.505912, 0.420167, 0.373297, 0.731689, 0.604208, 0.636839, 0.80008, 0.093207, 0.398543, 0.309017, 0.441120, 0.743145, 0.643391, 0.363558, 0.682948, 0.783099, 0.643832, 0.703902, 0.315162, 0.421562, 0.490123, 0.61888, 0.412345, 0.10101, 0.80008, 0.001234, 0.467890, 0.434567, 0.184726, 0.339168, 0.036115, 0.639921, 0.339168, 0.416115, 0.639921, 0.123456, 0.890123, 0.500962, 0.098765, 0.61888, 0.056789, 0.567890, 0.067890, 0.69888, 0.956789, 0.167890, 0.067890, 0.6999, 0.956789, 0.511110 },
    std::array<double, 64> { 0.432352, 0.444462, 0.778073, 0.340881, 0.392371, 0.490268, 0.444212, 0.309017, 0.819152, 0.462551, 0.462745, 0.181627, 0.443904, 0.117638, 0.80008, 0.421562, 0.490123, 0.45888, 0.412345, 0.210901, 0.80008, 0.654861, 0.153306, 0.159406, 0.143300, 0.108850, 0.151937, 0.106308, 0.109297, 0.198867, 0.197495, 0.055336, 0.244522, 0.636839, 0.845519, 0.180611, 0.809689, 0.064793, 0.215162, 0.401234, 0.467890, 0.434567, 0.490123, 0.573756, 0.339534, 0.40404, 0.4747, 0.88856, 0.22252, 0.528346, 0.439350, 0.573756, 0.110034, 0.22193, 0.6014, 0.88856, 0.576852, 0.128346, 0.449150, 0.570756, 0.408534, 0.07193, 0.6014, 0.439320 },
    std::array<double, 64> { 0.497204, 0.445324, 0.433445, 0.436115, 0.499962, 0.414539, 0.313498, 0.659193, 0.549662, 0.743145, 0.677530, 0.351937, 0.643300, 0.099848, 0.645519, 0.651057, 0.309017, 0.439173, 0.697204, 0.439173, 0.441120, 0.083099, 0.566237, 0.756802, 0.558924, 0.679415, 0.364784, 0.621610, 0.450447, 0.675637, 0.439173, 0.492459, 0.602634, 0.689821, 0.663558, 0.413498, 0.799689, 0.763558, 0.743145, 0.868632, 0.899698, 0.298477, 0.406737, 0.699849, 0.410781, 0.509297, 0.568064, 0.353738, 0.601859, 0.563558, 0.383641, 0.436737, 0.761629, 0.571206, 0.549662, 0.597849, 0.423444, 0.571206, 0.549662, 0.597849, 0.423444, 0.571206, 0.549662, 0.597849 },
    std::array<double, 64> { 0.299114, 0.200451, 0.240444, 0.300055, 0.655531, 0.355506, 0.344534, 0.549662, 0.589000, 0.447000, 0.355439, 0.355581, 0.355598, 0.453419, 0.453140, 0.660484, 0.666570, 0.364581, 0.453634, 0.355538, 0.549662, 0.633338, 0.444945, 0.455502, 0.632528, 0.655520, 0.614551, 0.365513, 0.345568, 0.6710475, 0.35654, 0.656476, 0.355004, 0.654429, 0.441471, 0.409297, 0.78520, 0.056802, 0.758924, 0.549662, 0.479415, 0.364784, 0.333665, 0.441471, 0.409297, 0.441120, 0.056802, 0.158924, 0.479415, 0.549662, 0.364784, 0.234655, 0.571206, 0.597849, 0.423444, 0.90002, 0.82311, 0.12345, 0.99995, 0.222222, 0.54456, 0.401234, 0.467890, 0.434567 },
    std::array<double, 64> { 0.336115, 0.539440, 0.599925, 0.592239, 0.590268, 0.371662, 0.586827, 0.528860, 0.581627, 0.783421, 0.575342, 0.530342, 0.409297, 0.099811, 0.425417, 0.339630, 0.495163, 0.492546, 0.596873, 0.521227, 0.592239, 0.598630, 0.551057, 0.699135, 0.692239, 0.651098, 0.699849, 0.699999, 0.509297, 0.441120, 0.756802, 0.558924, 0.679415, 0.364784, 0.621610, 0.450447, 0.675637, 0.439173, 0.083099, 0.563558, 0.383641, 0.436737, 0.451945, 0.412345, 0.678901, 0.699962, 0.783421, 0.651098, 0.524567, 0.037892, 0.509634, 0.075632, 0.543219, 0.598761, 0.672345, 0.501234, 0.556789, 0.523456, 0.189012, 0.7007, 0.501234, 0.56789, 0.700001, 0.1452222 },
    std::array<double, 64> { 0.993712, 0.824567, 0.892239, 0.887688, 0.897495, 0.781627, 0.794522, 0.481627, 0.499689, 0.499811, 0.437892, 0.499135, 0.995925, 0.959689, 0.409634, 0.439173, 0.499925, 0.699811, 0.675632, 0.643219, 0.698761, 0.672345, 0.101234, 0.9888, 0.423456, 0.789012, 0.7007, 0.101234, 0.567890, 0.334567, 0.590123, 0.71888, 0.694522, 0.692546, 0.699925, 0.697204, 0.549662, 0.549662, 0.641471, 0.410781, 0.679415, 0.364784, 0.17654, 0.321098, 0.765432, 0.621610, 0.450447, 0.175637, 0.87654, 0.321098, 0.765432, 0.439173, 0.083099, 0.111111, 0.679415, 0.87654, 0.321098, 0.765432, 0.364784, 0.621610, 0.450447, 0.675637, 0.439173, 0.563558 },
    std::array<double, 64> { 0.412345, 0.11111, 0.5005, 0.701234, 0.267890, 0.234567, 0.390123, 0.66688, 0.412345, 0.549662, 0.678901, 0.5005, 0.5005, 0.301234, 0.367890, 0.334567, 0.690123, 0.88888, 0.01345, 0.018901, 0.54456, 0.401234, 0.467890, 0.434567, 0.490123, 0.9888, 0.812345, 0.678901, 0.54456, 0.401234, 0.467890, 0.434567, 0.490123, 0.5298534, 0.40404, 0.6014, 0.88856, 0.576852, 0.628346, 0.439310, 0.011106, 0.601872, 0.489764, 0.443729, 0.439188, 0.504208, 0.10342, 0.065186, 0.245534, 0.40404, 0.6014, 0.555566, 0.544452, 0.528346, 0.439350, 0.011106, 0.601872, 0.489764, 0.664729, 0.439188, 0.504208, 0.530342, 0.065986 },
    std::array<double, 64> { 0.61888, 0.422345, 0.6741, 0.54456, 0.401234, 0.467890, 0.434567, 0.090123, 0.6668, 0.412345, 0.677, 0.5005, 0.5005, 0.401234, 0.467890, 0.434567, 0.499962, 0.315462, 0.121562, 0.415620, 0.315162, 0.421562, 0.220123, 0.61888, 0.62345, 0.678901, 0.5005, 0.401234, 0.467890, 0.434567, 0.490123, 0.65888, 0.490123, 0.41034, 0.40404, 0.6414, 0.555566, 0.576852, 0.728346, 0.439370, 0.011106, 0.601872, 0.489764, 0.724729, 0.439188, 0.504208, 0.530342, 0.065986, 0.245534, 0.917193, 0.6414, 0.555566, 0.576852, 0.4241, 0.039350, 0.011106, 0.601872, 0.489764, 0.554729, 0.439188, 0.504208, 0.07012, 0.065986 },
    std::array<double, 64> { 0.901234, 0.512345, 0.123456, 0.623456, 0.234567, 0.734567, 0.00044, 0.845678, 0.46888, 0.956789, 0.567890, 0.067890, 0.678901, 0.178901, 0.789012, 0.289012, 0.890123, 0.390123, 0.901234, 0.490123, 0.012345, 0.590123, 0.123456, 0.690123, 0.234567, 0.790123, 0.00044, 0.890123, 0.61888, 0.990123, 0.567890, 0.100234, 0.678901, 0.200234, 0.789012, 0.300234, 0.890123, 0.400234, 0.901234, 0.500234, 0.012345, 0.600234, 0.123456, 0.700234, 0.234567, 0.800234, 0.00044, 0.900234, 0.61888, 0.010234, 0.567890, 0.110234, 0.678901, 0.210234, 0.789012, 0.310234, 0.890123, 0.410234, 0.901234, 0.510234, 0.012345, 0.610234, 0.123456, 0.710234 },
    std::array<double, 64> { 0.412345, 0.64901, 0.4678, 0.001234, 0.067890, 0.434567, 0.090123, 0.22888, 0.3345, 0.633301, 0.302203, 0.302203, 0.401234, 0.467890, 0.434567, 0.490123, 0.63388, 0.07345, 0.622201, 0.302203, 0.401234, 0.467890, 0.434567, 0.490123, 0.9888, 0.412345, 0.678901, 0.845678, 0.401234, 0.467890, 0.434567, 0.490123, 0.490123, 0.35234, 0.40404, 0.6414, 0.33363, 0.576852, 0.144346, 0.439150, 0.011106, 0.100872, 0.489764, 0.34729, 0.439188, 0.504208, 0.87012, 0.065986, 0.245534, 0.40404, 0.6414, 0.555566, 0.576852, 0.11046, 0.439350, 0.011106, 0.100872, 0.489764, 0.44729, 0.439188, 0.504208, 0.8442, 0.065986 },
    std::array<double, 64> { 0.315773, 0.639072, 0.199135, 0.182216, 0.460737, 0.103719, 0.421869, 0.693633, 0.624345, 0.118703, 0.422618, 0.458145, 0.430154, 0.259188, 0.505912, 0.420167, 0.373297, 0.731689, 0.604208, 0.636839, 0.302203, 0.093207, 0.398543, 0.309017, 0.441120, 0.743145, 0.643391, 0.363558, 0.682948, 0.783099, 0.643832, 0.703902, .315162, 0.421562, 0.490123, 0.11888, 0.412345, 0.11301, 0.302203, 0.401234, 0.467890, 0.434567, 0.490123, 0.339168, 0.336115, 0.639921, 0.339168, 0.336115, 0.639921, 0.123456, 0.890123, 0.500962, 0.098765, 0.5888, 0.956789, 0.567890, 0.067890, 0.7888, 0.956789, 0.567890, 0.067890, 0.9888, 0.956789, 0.511110 },
    std::array<double, 64> { 0.499962, 0.710987, 0.743210, 0.387654, 0.321098, 0.765432, 0.409876, 0.654321, 0.498765, 0.432109, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.776543, 0.710987, 0.654321, 0.01465, 0.432109, 0.776543, 0.470665, 0.790123, 0.258534, 0.40404, 0.524403, 0.321163, 0.576852, 0.528346, 0.219390, 0.87019, 0.100872, 0.489764, 0.72129, 0.439188, 0.504208, 0.8442, 0.065986, 0.456534, 0.42404, 0.6414, 0.5000163, 0.4102, 0.541446, 0.439350, 0.87019, 0.100872, 0.489764, 0.55529, 0.439188, 0.504208, 0.7102, 0.065986 },
    std::array<double, 64> { 0.6414, 0.321163, 0.576852, 0.228346, 0.29350, 0.87019, 0.001872, 0.489764, 0.1124729, 0.439188, 0.504208, 0.7102, 0.441471, 0.409297, 0.441120, 0.056802, 0.758924, 0.479415, 0.364784, 0.621610, 0.450447, 0.275637, 0.439173, 0.302203, 0.266237, 0.492459, 0.357506, 0.568064, 0.353738, 0.601859, 0.563558, 0.383641, 0.436737, 0.452217, 0.720313, 0.603411, 0.585168, 0.639921, 0.372336, 0.494764, 0.318765, 0.714130, 0.441209, 0.451945, 0.477723, 0.700534, 0.23312, 0.065986, 0.245534, 0.23312, 0.6414, 0.0003, 0.42452, 0.778346, 0.439350, 0.87019, 0.001172, 0.489764, 0.666729, 0.439188, 0.004208, 0.9242, 0.065986 },
    std::array<double, 64> { 0.655542, 0.6414, 0.90163, 0.576852, 0.528346, 0.9350, 0.87019, 0.299962, 0.125962, 0.429962, 0.411962, 0.359962, 0.459962, 0.212462, 0.429962, 0.499962, 0.299962, 0.499962, 0.619962, 0.645678, 0.234567, 0.349962, 0.399962, 0.302203, 0.397962, 0.699962, 0.489764, 0.724729, 0.439188, 0.690362, 0.699962, 0.699624, 0.711622, 0.699962, 0.299962, 0.299962, 0.390001, 0.600001, 0.633212, 0.222252, 0.334536, 0.490123, 0.111534, 0.23312, 0.001872, 0.504208, 0.9242, 0.365986, 0.720534, 0.337193, 0.8410, 0.45463, 0.777852, 0.5446, 0.439350, 0.87019, 0.001872, 0.489764, 0.766729, 0.439188, 0.504208, 0.9242, 0.365986 },
    std::array<double, 64> { 0.699462, 0.699962, 0.299962, 0.299962, 0.799962, 0.156962, 0.246562, 0.799962, 0.729962, 0.799962, 0.199962, 0.399962, 0.649962, 0.779962, 0.654321, 0.54456, 0.288521, 0.349962, 0.519962, 0.599962, 0.500962, 0.598962, 0.512962, 0.329962, 0.359962, 0.549962, 0.544962, 0.509624, 0.50905, 0.30212, 0.30212, 0.530500, 0.490123, 0.22234, 0.014193, 0.8410, 0.844163, 0.576852, 0.128346, 0.439160, 0.011106, 0.001872, 0.489764, 0.104729, 0.439188, 0.504208, 0.9242, 0.365986, 0.720534, 0.317193, 0.8410, 0.3521163, 0.576852, 0.128346, 0.439350, 0.011106, 0.701872, 0.489764, 0.664729, 0.439188, 0.504208, 0.9242, 0.365986 },
    std::array<double, 64> { 0.699962, 0.783421, 0.651098, 0.524567, 0.537892, 0.509634, 0.575632, 0.543219, 0.598761, 0.672345, 0.501234, 0.556789, 0.523456, 0.189012, 0.54456, 0.501234, 0.567890, 0.534567, 0.90123, 0.556789, 0.512345, 0.678901, 0.61861, 0.501234, 0.567890, 0.534567, 0.590123, 0.390001, 0.533212, 0.522252, 0.394536, 0.567890, 0.490123, 0.720534, 0.617193, 0.8410, 0.04413, 0.576852, 0.128346, 0.93650, 0.011106, 0.701872, 0.489764, 0.524729, 0.439188, 0.504208, 0.9242, 0.365986, 0.720534, 0.77193, 0.8410, 0.0763, 0.576852, 0.518346, 0.439350, 0.2787, 0.20202, 0.489764, 0.624729, 0.439188, 0.504208, 0.89972, 0.365986 },
    std::array<double, 64> { 0.410781, 0.309631, 0.671442, 0.173756, 0.560534, 0.117193, 0.124403, 0.121163, 0.176852, 0.61861, 0.728346, 0.87350, 0.289035, 0.701872, 0.489764, 0.824729, 0.439188, 0.604208, 0.630342, 0.165986, 0.441886, 0.491037, 0.103710, 0.471420, 0.339376, 0.306899, 0.468192, 0.325921, 0.377078, 0.671206, 0.349662, 0.09784, 0.499962, 0.810987, 0.843210, 0.682948, 0.783099, 0.643832, 0.339765, 0.432109, 0.499962, 0.810987, 0.843210, 0.387654, 0.321098, 0.765432, 0.409876, 0.654321, 0.339765, 0.432109, 0.682948, 0.0783099, 0.643832, 0.703902, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.567890, 0.534567, 0.590123, 0.678901 },
    std::array<double, 64> { 0.652202, 0.649129, 0.637687, 0.617193, 0.666025, 0.683662, 0.661262, 0.401593, 0.752260, 0.642788, 0.448854, 0.650904, 0.422260, 0.608466, 0.636656, 0.297495, 0.461051, 0.666025, 0.422618, 0.410222, 0.267486, 0.836575, 0.345784, 0.196953, 0.481754, 0.471010, 0.193068, 0.61861, 0.339168, .315162, 0.421562, 0.490123, 0.21888, 0.400045, 0.078901, 0.61861, 0.401234, 0.467890, 0.434567, 0.559962, 0.329962, 0.229962, 0.30212, 0.543210, 0.901234, 0.654321, 0.012345, 0.765432, 0.123456, 0.876543, 0.234567, 0.987654, 0.61861, 0.098765, 0.6718, 0.11256, 0.432109, 0.789012, 0.654321, 0.901234, 0.765432, 0.012345, 0.987654, 0.23170 },
    std::array<double, 64> { 0.315773, 0.639072, 0.199135, 0.182216, 0.460737, 0.103719, 0.421869, 0.693633, 0.624345, 0.118703, 0.422618, 0.458145, 0.430154, 0.259188, 0.505912, 0.420167, 0.373297, 0.731689, 0.604208, 0.636839, 0.61861, 0.093207, 0.398543, 0.309017, 0.441120, 0.743145, 0.643391, 0.363558, 0.682948, 0.783099, 0.643832, 0.703902, 0.315162, 0.421562, 0.490123, 0.11888, 0.412345, 0.378901, 0.25255, 0.401234, 0.467890, 0.434567, 0.490123, 0.339168, 0.736115, 0.639921, 0.339168, 0.336115, 0.639921, 0.123456, 0.890123, 0.500962, 0.098765, 0.61558, 0.956789, 0.567890, 0.067890, 0.21888, 0.956789, 0.127890, 0.067890, 0.61888, 0.957789, 0.511110 },
    std::array<double, 64> { 0.02212, 0.02212, 0.70707, 0.576543, 0.510987, 0.543210, 0.587654, 0.321098, 0.665432, 0.509876, 0.654321, 0.598765, 0.65459, 0.576543, 0.510987, 0.654321, 0.598765, 0.122229, 0.576543, 0.510987, 0.654321, 0.598765, 0.122229, 0.576543, 0.510987, 0.654321, 0.598765, 0.122229, 0.576543, 0.70707, 0.500000, 0.547890, 0.490123, 0.5534, 0.017193, 0.224403, 0.201163, 0.576852, 0.601346, 0.039350, 0.689035, 0.701872, 0.489764, 0.624729, 0.0748, 0.504208, 0.89972, 0.065986, 0.720534, 0.70404, 0.8410, 0.71163, 0.576852, 0.0046, 0.439350, 0.489035, 0.20202, 0.489764, 0.624729, 0.439188, 0.504208, 0.89972, 0.065986 },
    std::array<double, 64> { 0.70707, 0.4707, 0.370707, 0.25255, 0.598534, 0.017193, 0.501234, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.25255, 0.501234, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.25255, 0.501234, 0.567890, 0.534567, 0.590123, 0.226789, 0.512345, 0.678901, 0.25255, 0.501234, 0.567890, 0.782123, 0.798534, 0.544193, 0.124403, 0.661163, 0.576852, 0.77746, 0.439350, 0.689035, 0.701872, 0.489764, 0.624729, 0.039188, 0.504208, 0.89972, 0.065986, 0.720534, 0.00404, 0.2201, 0.21163, 0.50052, 0.528346, 0.439350, 0.089035, 0.701872, 0.489764, 0.624729, 0.439188, 0.504208, 0.22222, 0.065986 },
    std::array<double, 64> { 0.689012, 0.599962, 0.23356, 0.501234, 0.567890, 0.399962, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.145678, 0.201234, 0.167890, 0.500567, 0.590123, 0.7789, 0.512345, 0.678901, 0.23356, 0.501234, 0.007890, 0.537567, 0.590123, 0.520789, 0.12345, 0.678901, 0.27894, 0.501234, 0.567890, 0.534567, 0.567890, 0.222411, 0.998534, 0.44193, 0.124403, 0.771163, 0.576852, 0.44346, 0.2150, 0.689035, 0.701872, 0.489764, 0.624729, 0.09188, 0.504208, 0.33332, 0.065986, 0.610534, 0.30404, 0.2201, 0.018088, 0.66652, 0.4428346, 0.339350, 0.444035, 0.20202, 0.489764, 0.624729, 0.439188, 0.504208, 0.33332, 0.065986 },
    std::array<double, 64> { 0.529962, 0.519962, 0.592962, 0.543219, 0.598761, 0.599962, 0.672345, 0.501234, 0.556789, 0.523456, 0.689012, 0.27894, 0.501234, 0.567890, 0.534567, 0.014123, 0.556789, 0.512345, 0.678901, 0.27894, 0.501234, 0.567890, 0.534567, 0.590123, 0.556789, 0.200345, 0.678901, 0.27894, 0.301234, 0.367890, 0.334567, 0.670600, 0.490123, 0.578534, 0.17193, 0.11403, 0.881163, 0.576852, 0.528346, 0.1770, 0.689035, 0.701872, 0.489764, 0.624729, 0.94188, 0.504208, 0.55552, 0.065986, 0.610534, 0.10404, 0.2201, 0.41163, 0.50062, 0.528346, 0.47750, 0.333035, 0.086872, 0.489764, 0.624729, 0.4388, 0.12128, 0.504208, 0.55552, 0.065986 },
    std::array<double, 64> { 0.399962, 0.376543, 0.610987, 0.343210, 0.309962, 0.699962, 0.387654, 0.321098, 0.665432, 0.509876, 0.654321, 0.598765, 0.122229, 0.376543, 0.507987, 0.654321, 0.598765, 0.451229, 0.376543, 0.810987, 0.654321, 0.598765, 0.77229, 0.376543, 0.507987, 0.654321, 0.598765, 0.451229, 0.376543, 0.288987, 0.654321, 0.523365, 0.551057, 0.38034, 0.0404, 0.22017, 0.441163, 0.576852, 0.528346, 0.27750, 0.689035, 0.18872, 0.489764, 0.624729, 0.49188, 0.504208, 0.99992, 0.065986, 0.610534, 0.20404, 0.22017, 0.61163, 0.570002, 0.0346, 0.479350, 0.689035, 0.61872, 0.489764, 0.624729, 0.439188, 0.504208, 0.99992, 0.065986 },
    std::array<double, 64> { 0.8707, 0.399962, 0.683421, 0.651098, 0.324567, 0.537892, 0.509634, 0.375632, 0.343219, 0.398761, 0.672345, 0.301234, 0.556789, 0.523456, 0.689012, 0.12799, 0.301234, 0.367890, 0.334567, 0.390123, 0.556789, 0.678901, 0.66666, 0.301234, 0.367890, 0.134567, 0.290123, 0.556789, 0.512345, 0.678901, 0.66666, 0.622652, 0.100247, 0.658534, 0.0404, 0.22017, 0.331163, 0.576852, 0.528346, 0.224350, 0.689035, 0.5056872, 0.489764, 0.624729, 0.39188, 0.504208, 0.41002, 0.065986, 0.610534, 0.10704, 0.22017, 0.921163, 0.576852, 0.27776, 0.09350, 0.689035, 0.186872, 0.489764, 0.624729, 0.439188, 0.504208, 0.41002, 0.065986, 0.12128 },
    std::array<double, 64> { 0.61888, 0.74, 0.64401, 0.44841, 0.401234, 0.467890, 0.434567, 0.690123, 0.61888, 0.412345, 0.678901, 0.67811, 0.44841, 0.401234, 0.467890, 0.434567, 0.499962, 0.315462, 0.421562, 0.415620, 0.315162, 0.421562, 0.490123, 0.61888, 0.12345, 0.678901, 0.44841, 0.401234, 0.467890, 0.434567, 0.490123, 0.71888, 0.490123, 0.41034, 0.40404, 0.22017, 0.421163, 0.576852, 0.528346, 0.12150, 0.2787, 0.303872, 0.489764, 0.284729, 0.439188, 0.504208, 0.41002, 0.065986, 0.245534, 0.9404, 0.22017, 0.018088, 0.1152, 0.51146, 0.739350, 0.2787, 0.416872, 0.489764, 0.724729, 0.439188, 0.372336, 0.504208, 0.41002, 0.065986 },
    std::array<double, 64> { 0.299962, 0.594962, 0.8707, 0.209962, 0.249962, 0.504962, 0.244442, 0.100962, 0.559962, 0.329962, 0.229962, 0.8707, 0.8707, 0.229962, 0.520962, 0.555962, 0.333962, 0.222962, 0.544962, 0.297962, 0.789962, 0.422325, 0.245562, 0.429962, 0.799962, 0.729962, 0.333962, 0.444962, 0.755962, 0.478901, 0.751114, 0.470665, 0.100247, 0.258534, 0.90404, 0.62017, 0.555566, 0.576852, 0.528346, 0.11150, 0.2787, 0.666872, 0.489764, 0.56729, 0.439188, 0.504208, 0.41002, 0.065986, 0.333534, 0.80404, 0.62017, 0.555566, 0.88852, 0.8846, 0.48350, 0.92102, 0.486872, 0.489764, 0.774729, 0.439188, 0.504208, 0.74552, 0.065986 },
    std::array<double, 64> { 0.410781, 0.309631, 0.671442, 0.173756, 0.560534, 0.117193, 0.124403, 0.121163, 0.176852, 0.44841, 0.728346, 0.439350, 0.289035, 0.06872, 0.489764, 0.654729, 0.439188, 0.604208, 0.630342, 0.165986, 0.441886, 0.491037, 0.103710, 0.471420, 0.339376, 0.306899, 0.468192, 0.325921, 0.350478, 0.671206, 0.349662, 0.09784, 0.499962, 0.81797, 0.843210, 0.682948, 0.783099, 0.643832, 0.339765, 0.432109, 0.499962, 0.810987, 0.843210, 0.387654, 0.321098, 0.765432, 0.409876, 0.654321, 0.339765, 0.432109, 0.682948, 0.783099, 0.643832, 0.703902, 0.567890, 0.534567, 0.590123, 0.556789, 0.512345, 0.678901, 0.567890, 0.534567, 0.590123, 0.678901 },
    std::array<double, 64> { 0.652202, 0.649129, 0.037687, 0.617193, 0.066025, 0.683662, 0.061262, 0.401593, 0.752260, 0.642788, 0.448854, 0.650904, 0.422260, 0.008466, 0.636656, 0.297495, 0.461051, 0.666025, 0.422618, 0.410222, 0.267486, 0.836575, 0.345784, 0.196953, 0.481754, 0.471010, 0.193068, 0.44841, 0.339168, .315162, 0.421562, 0.490123, 0.67888, 0.412345, 0.78901, 0.44841, 0.401234, 0.467890, 0.434567, 0.490123, 0.789012, 0.432109, 0.890123, 0.543210, 0.901234, 0.654321, 0.012345, 0.765432, 0.123456, 0.876543, 0.234567, 0.987654, 0.44841, 0.098765, 0.61448, 0.11256, 0.432109, 0.789012, 0.654321, 0.901234, 0.765432, 0.012345, 0.987654, 0.834567 },
    std::array<double, 64> { 0.315773, 0.639072, 0.199135, 0.182216, 0.460737, 0.103719, 0.421869, 0.693633, 0.624345, 0.118703, 0.422618, 0.458145, 0.430154, 0.259188, 0.505912, 0.420167, 0.373297, 0.731689, 0.604208, 0.636839, 0.44841, 0.093207, 0.398543, 0.309017, 0.441120, 0.743145, 0.643391, 0.363558, 0.682948, 0.783099, 0.643832, 0.703902, .315162, 0.421562, 0.100247, 0.60888, 0.72345, 0.478901, 0.654456, 0.401234, 0.467890, 0.434567, 0.490123, 0.339168, 0.336115, 0.639921, 0.339168, 0.336115, 0.639921, 0.123456, 0.890123, 0.500962, 0.098765, 0.61888, 0.256789, 0.567890, 0.067890, 0.61888, 0.956789, 0.567890, 0.067890, 0.956789, 0.511110 },
    std::array<double, 64> { 0.499962, 0.710987, 0.743210, 0.387654, 0.321098, 0.765432, 0.409876, 0.654321, 0.498765, 0.432109, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.62017, 0.221163, 0.576852, 0.0346, 0.000, 0.92102, 0.086872, 0.489764, 0.666729, 0.439188, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.376543, 0.288987, 0.654321, 0.498765, 0.432109, 0.776543, 0.710987, 0.654321, 0.01465, 0.432109, 0.776543, 0.470665, 0.780123, 0.258534, 0.0404, 0.504208, 0.74552, 0.065986, 0.456534, 0.50404, 0.62017, 0.555566, 0.50852, 0.528346, 0.77350, 0.92102, 0.41062, 0.489764, 0.77229, 0.439188, 0.504208, 0.74552, 0.065986 },
    std::array<double, 64> { 0.334567, 0.576852, 0.528346, 0.41050, 0.390123, 0.61888, 0.412345, 0.60901, 0.3120345, 0.301234, 0.367890, 0.734567, 0.790123, 0.61888, 0.412345, 0.8901, 0.654456, 0.701234, 0.767890, 0.631774, 0.624248, 0.375857, 0.719500, 0.169168, 0.781598, 0.40404, 0.47005, 0.678901, 0.654456, 0.501234, 0.567890, 0.534567, 0.390123, 0.60888, 0.82345, 0.470665, 0.6500123, 0.258534, 0.62017, 0.54563, 0.33852, 0.541346, 0.439050, 0.92102, 0.396872, 0.489764, 0.23729, 0.439188, 0.504208, 0.530342, 0.065986, 0.498534, 0.90114, 0.62017, 0.555566, 0.92102, 0.306872, 0.489764, 0.994729, 0.439188, 0.504208, 0.530342, 0.065986 },
    std::array<double, 64> { 0.699962, 0.789012, 0.654456, 0.301234, 0.367890, 0.134567, 0.190123, 0.61888, 0.412345, 0.678901, 0.34518, 0.101234, 0.167890, 0.134567, 0.190123, 0.61888, 0.412345, 0.878901, 0.3987678, 0.301234, 0.367890, 0.634567, 0.390123, 0.256789, 0.11145, 0.000901, 0.654456, 0.99234, 0.367890, 0.334567, 0.390123, 0.670665, 0.710123, 0.208534, 0.50404, 0.666664, 0.321163, 0.76852, 0.42346, 0.42350, 0.92102, 0.386872, 0.489764, 0.454729, 0.439188, 0.504208, 0.530342, 0.065986, 0.256534, 0.9089404, 0.666664, 0.555566, 0.222852, 0.528346, 0.439350, 0.87019, 0.401872, 0.489764, 0.884729, 0.439188, 0.504208, 0.74552, 0.065986 },
    std::array<double, 64> { 0.236623, 0.613926, 0.418028, 0.104975, 0.191739, 0.892855, 0.465252, 0.384898, 0.619587, 0.690716, 0.414940, 0.050378, 0.402000, 0.422000, 0.399962, 0.783099, 0.376543, 0.499962, 0.499962, 0.499962, 0.412345, 0.631774, 0.624248, 0.975857, 0.819500, 0.369168, 0.881598, 0.393962, 0.654456, 0.301234, 0.666534, 0.364444, 0.260123, 0.70034, 0.40404, 0.666664, 0.421163, 0.516852, 0.52146, 0.442300, 0.87019, 0.486872, 0.489764, 0.344729, 0.439188, 0.504208, 0.74552, 0.065986, 0.256534, 0.95895, 0.666664, 0.668886, 0.44152, 0.528346, 0.439350, 0.87019, 0.086872, 0.489764, 0.444729, 0.439188, 0.504208, 0.7842, 0.065986 },
    std::array<double, 64> { 0.61888, 0.412345, 0.6001, 0.75678, 0.401234, 0.467890, 0.434567, 0.690123, 0.61888, 0.412345, 0.678901, 0.67801, 0.654456, 0.401234, 0.467890, 0.434567, 0.499962, 0.315462, 0.421562, 0.415620, 0.315162, 0.421562, 0.490123, 0.756789, 0.412345, 0.978901, 0.654456, 0.401234, 0.467890, 0.434567, 0.490123, 0.61008, 0.10803, 0.41034, 0.40404, 0.666664, 0.581163, 0.576852, 0.528346, 0.1050, 0.87019, 0.186872, 0.489764, 0.724729, 0.439188, 0.504208, 0.81322, 0.065986, 0.245534, 0.50404, 0.76464, 0.668886, 0.11852, 0.528346, 0.432250, 0.87019, 0.339872, 0.489764, 0.334729, 0.439188, 0.504208, 0.61322, 0.065986 },
    std::array<double, 64> { 0.299962, 0.594962, 0.599962, 0.209962, 0.249962, 0.504962, 0.244442, 0.100962, 0.439188, 0.504208, 0.8707, 0.229962, 0.520962, 0.555962, 0.333962, 0.222962, 0.544962, 0.297962, 0.789962, 0.489764, 0.224729, 0.530342, 0.422325, 0.245562, 0.429962, 0.799962, 0.729962, 0.333962, 0.444962, 0.755962, 0.478901, 0.751114, 0.470665, 0.490123, 0.111534, 0.40404, 0.76464, 0.721163, 0.666852, 0.56346, 0.66350, 0.87019, 0.286872, 0.489764, 0.724729, 0.439188, 0.504208, 0.61322, 0.065986, 0.333534, 0.4959, 0.76464, 0.668886, 0.666852, 0.146, 0.432250, 0.87019, 0.426872, 0.489764, 0.114729, 0.439188, 0.504208, 0.61322, 0.065986 },
    std::array<double, 64> { 0.399962, 0.789012, 0.654456, 0.301234, 0.367890, 0.334567, 0.390123, 0.61888, 0.412345, 0.078901, 0.54456, 0.301234, 0.367890, 0.334567, 0.390123, 0.61888, 0.412345, 0.678901, 0.1898, 0.301234, 0.367890, 0.334567, 0.390123, 0.477789, 0.612345, 0.678901, 0.54456, 0.700124, 0.111000, 0.534567, 0.590123, 0.570665, 0.490123, 0.256534, 0.40404, 0.76464, 0.821163, 0.851112, 0.528346, 0.40050, 0.07019, 0.386872, 0.489764, 0.724729, 0.439188, 0.504208, 0.61322, 0.065986, 0.256534, 0.95804, 0.76464, 0.888888, 0.52252, 0.528346, 0.55220, 0.87019, 0.16872, 0.489764, 0.004729, 0.439188, 0.504208, 0.73012, 0.065986 },
    std::array<double, 64> { 0.557506, 0.8007, 0.511898, 0.624810, 0.380884, 0.583955, 0.591445, 0.597204, 0.570296, 0.418630, 0.419962, 0.429962, 0.401898, 0.380884, 0.402000, 0.422000, 0.400962, 0.783099, 0.076543, 0.8007, 0.489764, 0.724729, 0.439188, 0.504208, 0.73012, 0.499962, 0.699962, 0.412345, 0.1561890, 0.65588, 0.499962, 0.401898, 0.380884, 0.511898, 0.624810, 0.480884, 0.170665, 0.490123, 0.123234, 0.40404, 0.76464, 0.921163, 0.1052, 0.51046, 0.431050, 0.87019, 0.486872, 0.065986, 0.560534, 0.22404, 0.76464, 0.888888, 0.501852, 0.528346, 0.70010, 0.87019, 0.80872, 0.489764, 0.724729, 0.439188, 0.504208, 0.73012, 0.065986 },
    std::array<double, 64> { 0.599574, 0.540302, 0.755750, 0.731689, 0.406737, 0.534172, 0.589358, 0.447454, 0.639594, 0.681638, 0.798440, 0.419575, 0.414209, 0.384501, 0.670665, 0.681296, 0.534693, 0.438371, 0.528618, 0.794764, 0.402459, 0.428121, 0.720687, 0.511789, 0.613392, 0.768594, 0.475050, 0.755605, 0.576025, 0.400134, 0.429713, 0.480884, 0.490123, 0.400534, 0.40404, 0.76464, 0.021163, 0.57111, 0.528346, 0.039350, 0.8019, 0.49892, 0.489764, 0.784729, 0.439188, 0.504208, 0.24562, 0.065986, 0.560534, 0.220004, 0.76464, 0.888888, 0.11152, 0.528346, 0.477350, 0.87019, 0.86872, 0.12345, 0.451201, 0.32123, 0.504208, 0.24562, 0.065986 },
    std::array<double, 64> { 0.299962, 0.594962, 0.8007, 0.209962, 0.249962, 0.504962, 0.244442, 0.100962, 0.559962, 0.329962, 0.229962, 0.8007, 0.599962, 0.229962, 0.520962, 0.555962, 0.333962, 0.222962, 0.50544962, 0.297962, 0.789962, 0.422325, 0.245562, 0.429962, 0.799962, 0.729962, 0.333962, 0.444962, 0.755962, 0.478901, 0.751114, 0.470665, 0.990123, 0.258534, 0.557193, 0.024403, 0.721163, 0.576852, 0.12146, 0.499350, 0.67019, 0.810872, 0.065986, 0.333534, 0.41193, 0.06644, 0.888888, 0.176852, 0.52106, 0.439320, 0.87019, 0.470320, 0.810872, 0.489764, 0.724729, 0.439188, 0.504208, 0.538342, 0.73247, 0.065986, 0.99971, 0.12128 },

    std::array<double, 64> { 0.499962, 0.710987, 0.743210, 0.387654, 0.321098, 0.765432, 0.409876, 0.654321, 0.498765, 0.432109, 0.376543, 0.688987, 0.654321, 0.498765, 0.432109, 0.088987, 0.654321, 0.498765, 0.432109, 0.376543, 0.14225, 0.654321, 0.498765, 0.432109, 0.776543, 0.0121106, 0.232333, 0.710987, 0.654321, 0.01465, 0.432109, 0.776543, 0.470665, 0.490123, 0.258534, 0.777193, 0.06644, 0.888888, 0.576852, 0.00121, 0.439350, 0.77019, 0.810872, 0.489764, 0.994729, 0.439188, 0.504208, 0.440342, 0.065986, 0.456534, 0.20404, 0.06644, 0.888888, 0.7898712, 0.528346, 0.47770, 0.87019, 0.810872, 0.489764, 0.789729, 0.439188, 0.504208, 0.587342, 0.065986 },
    std::array<double, 64> { 0.410781, 0.509631, 0.571442, 0.573756, 0.560534, 0.40404, 0.01014, 0.018088, 0.587652, 0.528346, 0.439057, 0.87019, 0.486872, 0.489764, 0.724729, 0.439188, 0.504208, 0.24562, 0.065986, 0.441886, 0.491037, 0.503710, 0.971420, 0.560376, 0.306899, 0.468192, 0.525921, 0.350478, 0.571206, 0.549662, 0.597849, 0.423444, 0.490123, 0.12034, 0.40404, 0.01014, 0.021631, 0.55712, 0.528346, 0.439350, 0.87019, 0.586872, 0.489764, 0.894729, 0.439188, 0.504208, 0.24562, 0.065986, 0.560534, 0.3404, 0.01014, 0.888888, 0.576852, 0.17346, 0.439350, 0.87019, 0.64872, 0.489764, 0.724729, 0.439188, 0.504208, 0.530342, 0.065986 },
    std::array<double, 64> { 0.123456, 0.654321, 0.234567, 0.765432, 0.54456, 0.876543, 0.61888, 0.987654, 0.567890, 0.098765, 0.678901, 0.210987, 0.789012, 0.321098, 0.190123, 0.432109, 0.901234, 0.543210, 0.012345, 0.654321, 0.123456, 0.765432, 0.234567, 0.876543, 0.54456, 0.987654, 0.61448, 0.098765, 0.262890, 0.210987, 0.678901, 0.321098, 0.089012, 0.432109, 0.890123, 0.543210, 0.901234, 0.654321, 0.012345, 0.765432, 0.123456, 0.876543, 0.234567, 0.987654, 0.54456, 0.098765, 0.61888, 0.210987, 0.567890, 0.321098, 0.678901, 0.432109, 0.789012, 0.543210, 0.890123, 0.654321, 0.901234, 0.765432, 0.012345, 0.876543, 0.123456, 0.987654, 0.384567, 0.098761 },
    std::array<double, 64> { 0.901234, 0.512345, 0.123456, 0.623456, 0.234567, 0.734567, 0.54456, 0.845678, 0.61888, 0.956789, 0.567890, 0.067890, 0.678901, 0.178901, 0.789012, 0.289012, 0.520123, 0.390123, 0.901234, 0.490123, 0.012345, 0.590123, 0.123456, 0.690123, 0.634567, 0.790123, 0.54456, 0.890123, 0.61488, 0.990123, 0.567890, 0.100234, 0.678901, 0.200234, 0.789012, 0.300234, 0.890123, 0.400234, 0.101234, 0.500234, 0.012345, 0.600234, 0.123456, 0.700234, 0.234567, 0.800234, 0.54456, 0.900234, 0.61888, 0.010234, 0.567890, 0.110234, 0.678901, 0.210234, 0.789012, 0.288234, 0.80123, 0.410234, 0.901234, 0.510234, 0.012345, 0.610234, 0.123456, 0.710234 }

};

// Function to generate a 2D vector of random noise
std::vector<std::vector<double>> randomNoiseTexture(int width, int height)
{
    std::vector<std::vector<double>> texture(height, std::vector<double>(width));
    std::random_device rd; // Seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0.0, 1.0);
    printf("randomNoiseTexture:\n");
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            texture[y][x] = static_cast<double>(dis(gen));
            printf("%f, ", texture[y][x]);
        }
    }

    return texture;
}

std::vector<std::vector<double>> loadNoiseTexture(const std::string& filename, int width, int height)
{
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open file for reading: " << filename << std::endl;
        return {};
    }

    std::vector<std::vector<double>> texture(height, std::vector<double>(width));

    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            double value;
            file >> value;
            texture[y][x] = value;
        }
    }

    file.close();

    return texture;
}

// The result image size is the same as the input texture.
std::vector<std::vector<Eigen::Vector3d>> LICAlgorithm(
    const SteadyVectorField2D& vecfield,
    const int licImageSizeX,
    const int licImageSizeY,
    double stepSize,
    int MaxIntegrationSteps,
    VORTEX_CRITERION criterionlColorBlend)
{
    const auto& ret = computeMinMax<double, 64>(noiseTexture);

    const int Ydim = vecfield.field.size();
    const int Xdim = vecfield.field[0].size();

    std::vector<std::vector<Eigen::Vector3d>> output_texture(licImageSizeY, std::vector<Eigen::Vector3d>(licImageSizeX, { 0.0f, 0.0f, 0.0f }));

    const auto& vecfieldData = vecfield.field;
    const Eigen::Vector2d domainRange = vecfield.spatialDomainMaxBoundary - vecfield.spatialDomainMinBoundary;
    const double inverse_grid_interval_x = 1.0f / (double)vecfield.spatialGridInterval(0);
    const double inverse_grid_interval_y = 1.0f / (double)vecfield.spatialGridInterval(1);

    double minCurl;
    double maxCurl;
    std::vector<std::vector<double>> curl;
    if (criterionlColorBlend != VORTEX_CRITERION::NONE) {
        curl = computeTargetCrtierion(vecfieldData, Xdim, Ydim, vecfield.spatialGridInterval(0), vecfield.spatialGridInterval(1), criterionlColorBlend);
        // Normalize curl values for color mapping
        auto minMaxCurl = computeMinMax(curl);
        minCurl = minMaxCurl.first;
        maxCurl = minMaxCurl.second;
        if (!(maxCurl > minCurl) || (std::abs(maxCurl) < 1e-7 && std::abs(minCurl) < 1e-7)) {
            printf("Warning: criterion  %u  has scalar field are too small to be used for color mapping. Switching to NONE coloring.\n", (unsigned int)criterionlColorBlend);
            criterionlColorBlend = VORTEX_CRITERION::NONE;
        }
    }
    constexpr int TexDim = noiseTexture.size();
    const double FloatIdx_field2textureMultipilierX = ((double)TexDim - 1.0) / (double)(Xdim - 1.0);
    const double FloatIdx_field2textureMultipilierY = ((double)TexDim - 1.0) / (double)(Ydim - 1.0);

    for (int y = 0; y < licImageSizeY; ++y) {
        for (int x = 0; x < licImageSizeX; ++x) {
            double accum_value = 0.0f;
            int accum_count = 0;

            // map position from texture image grid coordinate to vector field
            double ratio_x = (double)((double)x / (double)licImageSizeX);
            double ratio_y = (double)((double)y / (double)licImageSizeY);

            // Trace forward
            // physicalPositionInVectorfield
            Eigen::Vector2d pos = { ratio_x * domainRange(0) + vecfield.spatialDomainMinBoundary(0),
                ratio_y * domainRange(1) + vecfield.spatialDomainMinBoundary(1) };

            for (int i = 0; i < MaxIntegrationSteps; ++i) {
                double floatIndicesXInField = (pos(0) - vecfield.spatialDomainMinBoundary(0)) * inverse_grid_interval_x;
                double floatIndicesYInField = (pos(1) - vecfield.spatialDomainMinBoundary(1)) * inverse_grid_interval_y;

                if (!(0 <= floatIndicesXInField && floatIndicesXInField < Xdim && 0 <= floatIndicesYInField && floatIndicesYInField < Ydim)) {
                    break; // Stop if we move outside the texture bounds
                }

                accum_value += bilinear_interpolate<double, TexDim>(noiseTexture, floatIndicesXInField * FloatIdx_field2textureMultipilierX, floatIndicesYInField * FloatIdx_field2textureMultipilierY);
                accum_count += 1;
                Eigen::Vector2d vec = bilinear_interpolate(vecfieldData, floatIndicesXInField, floatIndicesYInField);
                pos += vec * stepSize;
            }

            // Trace backward
            pos = { ratio_x * domainRange(0) + vecfield.spatialDomainMinBoundary(0),
                ratio_y * domainRange(1) + vecfield.spatialDomainMinBoundary(1) };

            for (int i = 0; i < MaxIntegrationSteps; ++i) {
                double floatIndicesXInField = (pos(0) - vecfield.spatialDomainMinBoundary(0)) * inverse_grid_interval_x;
                double floatIndicesYInField = (pos(1) - vecfield.spatialDomainMinBoundary(1)) * inverse_grid_interval_y;
                if (!(0 <= floatIndicesXInField && floatIndicesXInField < Xdim && 0 <= floatIndicesYInField && floatIndicesYInField < Ydim)) {
                    break; // Stop if we move outside the texture bounds
                }
                accum_value += bilinear_interpolate<double, TexDim>(noiseTexture, floatIndicesXInField * FloatIdx_field2textureMultipilierX, floatIndicesYInField * FloatIdx_field2textureMultipilierY);
                accum_count += 1;
                Eigen::Vector2d vec = bilinear_interpolate(vecfieldData, floatIndicesXInField, floatIndicesYInField);
                pos -= vec * stepSize;
            }

            // Compute the average value along the path
            if (accum_count > 0) {
                auto licValue = accum_value / accum_count;
                if (criterionlColorBlend != VORTEX_CRITERION::NONE) {
                    // Compute the normalized curl value
                    auto curlValue = curl[static_cast<int>(ratio_y * Ydim)][static_cast<int>(ratio_x * Xdim)];
                    double normalizedCurl = (curlValue - minCurl) / (maxCurl - minCurl);
                    Eigen::Vector3d curlColor = { normalizedCurl, 0.1, 1.0 - normalizedCurl };

                    auto whiteish = licValue;
                    whiteish = std::min(std::max(0.0, (whiteish - 0.4) * (1.5 / 0.4)), 1.0);
                    // output_texture[y][x] = mix(curlColor, Eigen::Vector3d(licValue, licValue, licValue), 1.0 - whiteish);
                    output_texture[y][x] = Eigen::Vector3d(licValue, licValue, licValue) * (1.0 - whiteish) + curlColor * whiteish;

                } else {
                    output_texture[y][x] = { licValue, licValue, licValue };
                }
            }
        }
    }

    return output_texture;
}

std::vector<std::vector<std::vector<Eigen::Vector3d>>>
LICAlgorithm_UnsteadyField(
    const UnSteadyVectorField2D& vecfield,
    const int licImageSizeX,
    const int licImageSizeY,
    double stepSize,
    int MaxIntegrationSteps, VORTEX_CRITERION curlColorBlend)
{
    std::vector<int> timeIndex;
    timeIndex.resize(vecfield.timeSteps);
    std::iota(timeIndex.begin(), timeIndex.end(), 0);
    std::vector<std::vector<std::vector<Eigen::Vector3d>>> resultData;
    resultData.resize(vecfield.timeSteps);
#if defined(DISABLE_CPP_PARALLELISM) || defined(_DEBUG)
    auto policy = std::execution::seq;
#else
    auto policy = std::execution::par_unseq;
#endif
    std::transform(policy, timeIndex.begin(), timeIndex.end(), resultData.begin(), [&](int time) {
        // std::cout << "parallel lic rendering.. timeIndex size: " << time << std::endl;
        auto slice = vecfield.getVectorfieldSliceAtTime(time);
        auto licPic = LICAlgorithm(slice, licImageSizeX, licImageSizeY, stepSize, MaxIntegrationSteps, curlColorBlend);
        return std::move(licPic);
    });
    return resultData;
}
